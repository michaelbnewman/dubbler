#!/usr/bin/env python3

import json
import sys
from argparse import ArgumentParser
from subprocess import run
from time import sleep

contract_address = "0xC55708C5067883bE5029a567e16C880ebC15D21c"

def claim_rewards(user):
    result = run(f'cast send --account {user} --password "" {contract_address} "claimRewards()"', shell=True, capture_output=True)
    if result.returncode == 0:
        output = result.stdout.decode()
        lines = output.split("\n")
        for line in lines:
            if "transactionHash " in line:
                tx_hash = line.split(" ")[-1]
                tx_hash = tx_hash.rstrip()
    else:
        error = result.stderr.decode()
        print(f"stderr while running 'cast send claimRewards': {error}")
        exit(1)
    return tx_hash

def get_cast_version():
    result = run("cast --version", shell=True, capture_output=True)
    if result.returncode == 0:
        output = result.stdout.decode()
        cast_first_line = output.split("\n")[0]
    else:
        error = result.stderr.decode()
        print(f"Error running cast: {error}")
        exit(1)
    return cast_first_line

def get_python_version():
   return f"Python {sys.version} @ {sys.executable}"

def get_users():
    users = []
    result = run("cast wallet list", shell=True, capture_output=True)
    if result.returncode == 0:
        output = result.stdout.decode()
        lines = output.split("\n")
        for line in lines:
            if len(line):
                (user, user_type) = line.split(" ")
    else:
        error = result.stderr.decode()
        print(f"stderr while running 'cast wallet list': {error}")
        exit(1)
    users.append(user)
    return users

def get_user_address(user):
    result = run(f'cast wallet address --account {user} --password ""', shell=True, capture_output=True)
    if result.returncode == 0:
        output = result.stdout.decode()
        address = output.rstrip()
    else:
        error = result.stderr.decode()
        print(f"stderr while running 'cast wallet address': {error}")
        exit(1)
    return address

def get_balance(address):
    result = run(f'cast balance {address}', shell=True, capture_output=True)
    if result.returncode == 0:
        output = result.stdout.decode()
        balance = int(output.rstrip())
    else:
        error = result.stderr.decode()
        print(f"stderr while running 'cast balance': {error}")
        exit(1)
    return balance

def get_receipt(tx_hash):
    receipt = {}
    result = run(f'cast receipt {tx_hash}', shell=True, capture_output=True)
    if result.returncode == 0:
        output = result.stdout.decode()
        receipt_lines = output.split("\n")
        for receipt_line in receipt_lines:
            cols = receipt_line.split(" ", 1)
            if len(cols) == 2:
                (key, value) = cols
                value = value.strip()
            else:
                key = cols[0]
                value = None
            receipt[key] = value
    else:
        error = result.stderr.decode()
        print(f"stderr while running 'cast receipt': {error}")
        exit(1)
    return receipt

def get_request_id(logs_string):
    logs = json.loads(logs_string)
    for log in logs:
        if log["address"] == contract_address.lower():
           assert log["topics"][0] == "0x1d9111435f4b854f073bc412802d9927efaba88c5d4f981bb66464a1ea11f045"
           request_id = int(log["topics"][-1], 16)
    return request_id

def get_returned_number(request_id):
    returned_number = 0
    for retry in range(30):
        result = run(f'cast call {contract_address} "returnedNumber(uint256)(uint256)" {request_id}', shell=True, capture_output=True)
        output = result.stdout.decode()
        returned_number = int(output.rstrip())
        if returned_number > 0:
            break
        sleep(1)
    return returned_number

def guess_number(user, wager):
    result = run(f'cast send --account {user} --password "" {contract_address} "guessRandomNumber(uint256)" {wager}', shell=True, capture_output=True)
    if result.returncode == 0:
        output = result.stdout.decode()
        lines = output.split("\n")
        for line in lines:
            if "transactionHash " in line:
                tx_hash = line.split(" ")[-1]
    else:
        error = result.stderr.decode()
        print(f"stderr while running 'cast send guessRandomNumber': {error}")
        exit(1)
    return tx_hash

def print_users_and_balances():
    print("Available Users (Balance):")
    users = get_users()
    for user in users:
        balance_wei = get_balance(get_user_address(user))
        balance = balance_wei / 10**18
        print(f"{user} ({balance:0.6f} DBLR)")

if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument("user", help="Username of player.", default=None, nargs='?')
    parser.add_argument("guess", help="Number guessed (1 to 10, inclusive)", default=None, nargs='?')
    parser.add_argument("-d", "--debug", action="store_true", dest="debug", default=False, help="Activate debug mode")
    parser.add_argument("-l", "--list-users", action="store_true", dest="list_users", default=False, help="List users and balances")

    args = parser.parse_args()

    if args.debug:
        print(get_python_version())
        print(get_cast_version())
        print("- - - - - - - - - - - - - - -")

    if args.list_users:
        print_users_and_balances()
        exit(0)

    if not args.user or not args.guess:
        parser.print_help()
        exit(1)

    user_selected = args.user
    users = get_users()
    if user_selected not in users:
        print(f"ERROR: {user_selected} not a known user.")
        print_users_and_balances()
        exit(0)

    guess = int(args.guess)
    tx_hash = guess_number(user_selected, guess)
    sleep(2)
    receipt = get_receipt(tx_hash)
    request_id = get_request_id(receipt["logs"])
    returned_number = get_returned_number(request_id)

    print(f"You guessed {guess}")
    print(f"The random number was {returned_number}")
    if guess == returned_number:
        print("Congratulations! You won!")
        print("Claiming rewards...")
        tx_hash = claim_rewards(user_selected)
        print(f"https://subnets-test.avax.network/dubbler/tx/{tx_hash}?tab=internal_txs")
    else:
        print("Sorry, you lost.")

    balance_wei = get_balance(get_user_address(user_selected))
    balance = balance_wei / 10**18
    print(f"Your balance is {balance:0.6f} DBLR")

    balance_wei = get_balance(contract_address)
    balance = balance_wei / 10**18
    print(f"The remaining prize pool is {balance:0.6f} DBLR")
